lctl(1)                                                                                                                 configuration utilities                                                                                                                 lctl(1)



NAME
       lctl - Low level Lustre filesystem configuration utility

SYNOPSIS
       lctl
       lctl --device <devno> <command [args]>

DESCRIPTION
       lctl is used to directly control Lustre via an ioctl interface, allowing various configuration, maintenance, and debugging features to be accessed.

       lctl can be invoked in interactive mode by issuing lctl command. After that, commands are issued as below. The most common commands in lctl are dl , dk , device , network <up/down> , list_nids , ping nid , help , quit.

       To get a complete listing of available commands, type help at the lctl prompt.  To get basic help on the meaning and syntax of a command, type help command

       For non-interactive use, one uses the second invocation, which runs command after connecting to the device.


   Network Configuration
       network <up/down>|<tcp/elan/myrinet>
              Start or stop LNET, or select a network type for other lctl LNET commands

       list_nids
              Print all Network Identifiers on the local node. LNET must be running.

       which_nid <nidlist>
              From a list of nids for a remote node, show which interface communication will take place on.

       replace_nids <devicename> <nid1>[,nid2,nid3 ...]
              Replace  the LNET Network Identifiers for a given device, as when the server's IP address has changed.  This command must be run on the MGS node.  Only MGS server should be started (command execution returns error in another cases). To start the MGS
              service only: mount -t lustre <MDT partition> -o nosvc <mount point> Note the replace_nids command skips any invalidated records in the configuration log.  The previous log is backed up with the suffix '.bak'.

       ping <nid>
              Check LNET connectivity via an LNET ping. This will use the fabric appropriate to the specified NID.

       interface_list
              Print the network interface information for a given network type.

       peer_list
              Print the known peers for a given network type.

       conn_list
              Print all the connected remote NIDs for a given network type.

       route_list
              Print the complete routing table.

   Device Selection
       device <devname>
              This will select the specified OBD device.  All other commands depend on the device being set.

       device_list
              Show all the local Lustre OBDs. AKA dl

   Device Operations
       list_param [-F|-R] <param_search ...>
              List the Lustre or LNet parameter name -F Add '/', '@' or '=' for dirs, symlinks and writeable files, respectively.
              -R Recursively list all parameters under the specified parameter search string. If param_search is unspecified, all the parameters will be shown.
              Examples:
              # lctl list_param ost.*
                ost.OSS
                ost.num_refs
              # lctl list_param -F ost.* debug
                ost.OSS/
                ost.num_refs
                debug=
              # lctl list_param -R mdt
                mdt
                mdt.lustre-MDT0000
                mdt.lustre-MDT0000.capa
                mdt.lustre-MDT0000.capa_count
                mdt.lustre-MDT0000.capa_key_timeout
                mdt.lustre-MDT0000.capa_timeout
                mdt.lustre-MDT0000.commit_on_sharing
                mdt.lustre-MDT0000.evict_client
                ...

       get_param [-F|-n|-N|-R] <parameter ...>
              Get the value of Lustre or LNET parameter.
              -F When -N specified, add '/', '@' or '=' for directories, symlinks and writeable files, respectively.
              -n Print only the value and not parameter name.
              -N Print only matched parameter names and not the values. (Especially useful when using patterns.)
              -R Print all of the parameter names below the specified name.
              Examples:
              # lctl get_param ost.*
                ost.OSS
                ost.num_refs
              # lctl get_param -n debug timeout
                super warning dlmtrace error emerg ha rpctrace vfstrace config console
                20
              # lctl get_param -N ost.* debug
                ost.OSS
                ost.num_refs
                debug
              lctl "get_param -NF" is equivalent to "list_param -F".

       set_param [-n] [-P] [-d] <parameter=value ...>
              Set the value of Lustre or LNET parameter.
              -n Disable printing of the key name when printing values.
              -P Set the parameter permanently, filesystem-wide.  This parameters are only visible to 2.5.0 and later clients, older clients will not see these parameters.
              -d Remove the permanent setting (only with -P option)
              Examples:
              # lctl set_param fail_loc=0 timeout=20
                fail_loc=0
                timeout=20
              # lctl set_param -n fail_loc=0 timeout=20
                0
                20
              # lctl set_param -P osc.*.max_dirty_mb=32

       conf_param [-d] <device|fsname>.<parameter>=<value>
              Set a permanent configuration parameter for any device via the MGS.  This command must be run on the MGS node.
              -d <device|fsname>.<parameter> Delete a parameter setting (use the default value at the next restart).  A null value for <value> also deletes the parameter setting.
              Parameters:
              All of the writable parameters under lctl list_param (e.g.  lctl list_param -F osc.*.* | grep = ) can be permanently set using lctl conf_param , but the format is slightly different.  For conf_param, the device is specified first, then the  obdtype.
              (See examples below.)  Wildcards are not supported.
              Additionally,  failover  nodes  may be added (or removed), and some system-wide parameters may be set as well (sys.at_max, sys.at_min, sys.at_extra, sys.at_early_margin, sys.at_history, sys.timeout, sys.ldlm_timeout.)  <device> is ignored for system
              wide parameters.
              Examples:
              # lctl conf_param testfs.sys.at_max=1200
              # lctl conf_param testfs.llite.max_read_ahead_mb=16
              # lctl conf_param testfs-MDT0000.lov.stripesize=2M
              # lctl conf_param lustre-OST0001.osc.active=0
              # lctl conf_param testfs-OST0000.osc.max_dirty_mb=29.15
              # lctl conf_param testfs-OST0000.ost.client_cache_seconds=15
              # lctl conf_param testfs-OST0000.failover.node=1.2.3.4@tcp1

       activate
              Reactivate an import after deactivating, below.  This setting is only effective until the next restart (see conf_param ).

       deactivate
              Deactivate an import, in particular meaning do not assign new file stripes to an OSC.  This command should be used on the OSC in the MDT LOV corresponding to a failed OST device, to prevent further attempts at communication with the failed OST.

       abort_recovery
              Abort the recovery process on a restarting MDT or OST device

   Virtual Block Device Operation
       Lustre is able to emulate a virtual block device upon regular file. It is necessary to be used when you are trying to setup a swap space via file.

       blockdev_attach <file name> <device node>
              Attach the lustre regular file to a block device. If the device node is not existent, lctl will create it - it is recommended to create it by lctl since the emulator uses a dynamical major number.

       blockdev_detach <device node>
              Detach the virtual block device.

       blockdev_info <device node>
              Acquire which lustre file was attached to the device node.

   Changelogs
       changelog_register [-n]
              Register a new changelog user for a particular device.  Changelog entries will not be purged beyond any registered users' set point. (See lfs changelog_clear.)
              -n Print only the ID of the newly registered user.

       changelog_deregister <id>
              Unregister an existing changelog user.  If the user's "clear" record number is the minimum for the device, changelog records will be purged until the next minimum.

   Nodemap
       An identity mapping feature that facilitates mapping of client UIDs and GIDs to local file system UIDs and GIDs, while maintaining POSIX ownership, permissions, and quota.

       While the nodemap feature is enabled, all client file system access is subject to the nodemap identity mapping policy, which consists of the 'default' catchall nodemap, and any user-defined nodemaps. The 'default' nodemap  maps  all  client  identities  to
       99:99 (nobody:nobody). Administrators can define nodemaps for a range of client NIDs which map identities, and these nodemaps can be flagged as
        'trusted' so identities are accepted without translation, as well as flagged as 'admin' meaning that root is not squashed for these nodes.

       Note:  In the current phase of implementation, to use the nodemap functionality you only need to enable and define nodemaps on the MDS. The MDSes must also be in a nodemap with the admin and trusted flags set. To use quotas with nodemaps, you must also use
       set_param to enable and define nodemaps on the OSS (matching what is defined on the MDS). Nodemaps do not currently persist, unless you define them with set_param and use the -P flag. Note that there is a hard limit to the number of changes you can persist
       over the lifetime of the file system.

       See also:


       lctl-nodemap-activate(8)
           Activate/deactivate the nodemap feature.

       lctl-nodemap-add(8)
           Add a new nodemap, to which NID ranges, identities, and properties can be added.

       lctl-nodemap-del(8)
           Delete an existing nodemap.

       lctl-nodemap-add-range(8)
           Define a range of NIDs for a nodemap.

       lctl-nodemap-del-range(8)
           Delete an existing NID range from a nodemap.

       lctl-nodemap-add-idmap(8)
           Add a UID or GID mapping to a nodemap.

       lctl-nodemap-del-idmap(8)
           Delete an existing UID or GID mapping from a nodemap.

       lctl-nodemap-modify(8)
           Modify a nodemap property.


   LFSCK
       An on-line Lustre consistency check and repair tool.

       lfsck_start <-M | --device [MDT,OST]_device>
                   [-A | --all] [-c | --create_ostobj [on | off]]
                   [-e | --error <continue | abort>] [-h | --help]
                   [-n | --dryrun [on | off]] [-o | --orphan]
                   [-r | --reset] [-s | --speed speed_limit]
                   [-t | --type lfsck_type[,lfsck_type...]]
                   [-w | --window_size size]
              Start LFSCK on the specified MDT or OST device with specified parameters.

         -M, --device <MDT,OST_device>
              The MDT or OST device to start LFSCK/scrub on.

         -A, --all
              Start LFSCK on all available MDT devices.

         -c, --create_ostobj [on | off]
              Create the lost OST-object for dangling LOV EA: 'off' (default) or 'on'. Under default mode, when the LFSCK find some MDT-object with dangling reference, it will report the inconsistency but will not repair it.  If 'on' is given, then LFSCK will re-
              create the missed OST-object.

         -e, --error <error_handle>
              With error_handle as 'abort' then if a repair is impossible LFSCK will save the current position stop with an error.  Otherwise the default behavior is to 'continue' if a repair is impossible.

         -h, --help
              Show the usage message.

         -n, --dryrun [on | off]
              Perform a trial run with no changes made, if 'on' or no argument is given.  Default is 'off', meaning that any inconsistencies found will be repaired.

         -o, --orphan
              Handle orphan objects, such as orphan OST-objects for layout LFSCK by linking them under the .../.lustre/lost+found directory.

         -r, --reset
              Set the current position of object iteration to the beginning of the specified device. The non-specified parameters will also be reset to the default. By default the iterator will resume the scanning from the  last  saved  checkpoint  position,  and
              other unspecified parameters will be the same as the prior incomplete run.

         -s, --speed <speed_limit>
              Set  the  upper  limit of LFSCK processing in objects per second to reduce load on the servers and storage. If no value is specified the saved value is used (if resuming from a checkpoint). Otherwise the default value of 0 is used, which means check
              the filesystem as quickly as possible.

         -t, --type <lfsck_type[,lfsck_type...]>
              The type of LFSCK checking/repair to execute. If no type is given and the previous run was incomplete or internal consistency checks detected an error, then the same types are used for the next run.  Otherwise, the default is to check all  types  of
              consistency.  Any time LFSCK is triggered on an ldiskfs MDT or OST then OI Scrub is run.  Valid types are a comma-separated list of one or more of scrub to run only the local OI Scrub on ldiskfs targets, namespace for FID-in-dirent and linkEA check‐
              ing on the MDT(s), layout for MDT-OST cross-reference consistency, and all to run all of the available check types.

         -w, --window_size <size>
              Specifies the maximum number of in-flight request being processed at one time.  This controls the load placed on remote OSTs when running layout checks.  By default there are at most 1024 outstanding requests.

       lfsck_stop <-M | --device [MDT,OST]_device> [-A | --all] [-h | --help]
              Stop LFSCK on the specified MDT or OST device.

         -M, --device <[MDT,OST]_device>
              The MDT or OST device to stop LFSCK/scrub on.

         -A, --all
              Stop LFSCK on all devices.

         -h, --help
              Show this help.

   Debug
       debug_daemon
              Start and stop the debug daemon, and control the output filename and size.

       debug_kernel [file] [raw]
              Dump the kernel debug buffer to stdout or file.

       debug_file <input> [output]
              Convert kernel-dumped debug log from binary to plain text format.

       clear  Clear the kernel debug buffer.

       mark <text>
              Insert marker text in the kernel debug buffer.

       filter <subsystem id/debug mask>
              Filter kernel debug messages by subsystem or mask.

       show <subsystem id/debug mask>
              Show specific type of messages.

       debug_list <subs/types>
              List all the subsystem and debug types.

       modules <path>
              Provide gdb-friendly module information.


OPTIONS
       The following options can be used to invoke lctl.

       --device
              The device to be used for the operation. This can be specified by name or number. See device_list

       --ignore_errors | ignore_errors
              Ignore errors during script processing

       lustre_build_version
              Output the build version of the Lustre kernel modules

       --version
              Output the build version of the lctl utility

       help   Provides brief help on the various arguments

       exit/quit
              Quit the interactive lctl session


EXAMPLES
       # lctl
       lctl > dl
         0 UP mgc MGC192.168.0.20@tcp bfbb24e3-7deb-2ffa-eab0-44dffe00f692 5
         1 UP ost OSS OSS_uuid 3
         2 UP obdfilter testfs-OST0000 testfs-OST0000_UUID 3
       lctl > dk /tmp/log Debug log: 87 lines, 87 kept, 0 dropped.
       lctl > quit


AVAILABILITY
       lctl is part of the Lustre(7) filesystem package.

SEE ALSO
       lustre(7), mkfs.lustre(8), mount.lustre(8), lctl(8), lfs(1)



Lustre                                                                                                                         2003 Oct 8                                                                                                                       lctl(1)
